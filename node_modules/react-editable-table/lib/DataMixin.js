'use strict';

var $__0=     require('./utils'),sort=$__0.sort,filter=$__0.filter;
var _ = require('lodash');

var containsIgnoreCase = function(a, b) {
  a = (a + '').toLowerCase().trim();
  b = (b + '').toLowerCase().trim();
  return b.indexOf(a) >= 0;
};

module.exports = {

  getInitialState:function() {
    var data = this.convertFromArray(this.props.initialData);
    var itemKeys = this.props.columns.map(function(item)  {return item.prop;});

    return {
      // Clone the initialData.
      data: data,
      initialData: data,
      stateCache: data,
      sortBy: this.props.initialSortBy,
      filterValues: {},
      currentPage: 0,
      itemKeys: itemKeys,
      pageLength: this.props.initialPageLength
    };
  },

  getDefaultProps:function() {
    return {
      initialPageLength: 10,
      pageLengthOptions: [ 5, 10, 20 ],
      filters: {
        globalSearch: {
          filter: containsIgnoreCase
        }
      }
    };
  },

  componentWillMount:function() {
    // Do the initial sorting if specified.
    var $__0=   this.state,sortBy=$__0.sortBy,data=$__0.data;
    if (sortBy) {
      this.setState({ data: sort(sortBy, data) });
    }
  },

  componentWillReceiveProps:function(nextProps) {
    if(_.isEqual(this.props, nextProps)) {
      return;
    }
    var $__0=   this.state,filterValues=$__0.filterValues,sortBy=$__0.sortBy;
    var $__1=   nextProps,initialData=$__1.initialData,filters=$__1.filters;

    var newInitialData = this.convertFromArray(initialData);

    if(this.state.filterValues.globalSearch) {
      var newData = filter.call(this, filters, filterValues, newInitialData);
      // newData = sort(sortBy, newData);
      this.setState({
        data: newData,
        stateCache: newInitialData,
        filterValues: filterValues,
        currentPage: 0
      });
    } else {
      this.setState({
        data: newInitialData,
        initialData: newInitialData,
        stateCache: newInitialData,
        currentPage: 0,
        filterValues: {
          globalSearch: ''
        }
      });
    }
  },

  convertFromArray:function (data) {
    if(this.props.dataType === "ARRAY" && this.props.dataScheme.length === 1) {
      return data.map(function(item)  {
        var obj = {};
        obj[this.props.dataScheme[0]] = item;
        obj.ukey = _.uniqueId();
        return obj;
      }.bind(this));
    }
    return data;
  },

  convertToArray:function (data) {
    return data.map(function(item)  {
      return item[this.props.dataScheme[0]]
    }.bind(this));
  },

  onSort:function(sortBy, type) {
    this.setState({
      sortBy: sortBy,
      data: sort(sortBy, this.state.data, type)
    });
  },

  onFilter:function(filterName, filterValue) {
    var $__0=    this.state,filterValues=$__0.filterValues,sortBy=$__0.sortBy,data=$__0.data;
    var $__1=    this.props,initialData=$__1.initialData,filters=$__1.filters,columns=$__1.columns;
    var type = _.find(columns, { 'prop': sortBy.prop }).type;
    var newInitialData = this.convertFromArray(initialData);

    filterValues[filterName] = filterValue;
    var newData = filter.call(this, filters, filterValues, newInitialData);
    // newData = sort(sortBy, newData, type);
    // console.log("OnFilter", newData, "Cache", data.slice(0));

    this.setState({
      data: newData,
      stateCache: data.slice(0),
      filterValues: filterValues,
      currentPage: 0
    });
  },

  handleChange:function(col, row, val) {
    var prop = col.prop;
    row[prop] = val;

    if(prop !== "checked"){
      this.props.onChange(this.convertToArray(this.state.data));
    } else {
      // _.find(this.state.data, ['active', false]);
      this.setState(this.state.data);
    }

    // this.props.onChange(_.union(this.state.data, this.convertFromArray(this.props.initialData)));
    //console.log("onChange", col, row, val, this.convertToArray(this.state.data));
    //this.props.onChange(this.convertToArray(this.state.data));
    // this.props.onChange(_.union(this.convertToArray(this.state.data), this.props.initialData));
  },

  handleToggleCheckAll:function(flag) {
    //console.log('check all', this.state.data);
    this.state.data.forEach(function(item)  {
      item.checked = !!flag;
      return item;
    });
    this.setState(this.state.data);
  },

  handleDelete:function() {
    _.remove(this.state.data, function(item)  {return item.checked;});
    _.remove(this.state.stateCache, function(item)  {return item.checked;});
    this.props.onChange(this.convertToArray(this.state.stateCache));
  },

  handleAdd:function() {
    var $__0=    _.clone(this.state),initialData=$__0.initialData;
    var newObj = { ukey: Date.now()};
    this.state.itemKeys.forEach(function(key)  {
      newObj[key] = '';
    });
    initialData.unshift(newObj);

    this.setState({
      data: initialData,
      filterValues: {
        globalSearch: ''
      }
    });
  },

  // Pagination
  buildPage:function() {
    var $__0=    this.state,data=$__0.data,currentPage=$__0.currentPage,pageLength=$__0.pageLength;
    var start = pageLength * currentPage;
    return {
      data: data.slice(start, start + pageLength),
      currentPage: currentPage,
      totalPages: Math.ceil(data.length / pageLength)
    };
  },

  onChangePage:function(pageNumber) {
    this.setState({ currentPage: pageNumber });
  },

  onPageLengthChange:function(value) {
    var newPageLength = +value;
    var $__0=   this.state,currentPage=$__0.currentPage,pageLength=$__0.pageLength;
    var newPage = Math.floor((currentPage * pageLength) / newPageLength);

    this.setState({
      pageLength: newPageLength,
      currentPage: newPage
    });
  }

};

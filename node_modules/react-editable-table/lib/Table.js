'use strict';

var React = require('react');

var simpleGet = function(key)  {return function(data)  {return data[key];};};
var keyGetter = function(keys)  {return function(data)  {return keys.map(function(key)  {
  return data[key]
});};};

var isEmpty = function(value)  {return value === undefined || value === null || value === '';};
var _ = require('lodash');

var getCellValue =
  function($__0    , row) 
           
    {var prop=$__0.prop,defaultContent=$__0.defaultContent,render=$__0.render;return !isEmpty(prop) && isEmpty(row[prop]) ? defaultContent :
      // Use the render function for the value.
      render ? render(row[prop], row) :
        // Otherwise just return the value.
        row[prop];};

var getCellClass =
  function($__0   , row) 
    {var prop=$__0.prop,className=$__0.className;return !isEmpty(prop) && isEmpty(row[prop]) ? 'empty-cell' :
      typeof className === 'function' ? className(row[prop], row) :
        className;};

function buildSortProps(col, sortBy, onSort) {
  var order = sortBy.prop === col.prop ? sortBy.order : 'none';
  var nextOrder = order === 'ascending' ? 'descending' : 'ascending';
  var sortEvent = onSort.bind(null, {prop: col.prop, order: nextOrder});

  return {
    'onClick': sortEvent,
    // Fire the sort event on enter.
    'onKeyDown': function(e)  {
      if (e.keyCode === 13) sortEvent();
    },
    // Prevents selection with mouse.
    'onMouseDown': function(e)  {return e.preventDefault();},
    'tabIndex': 0,
    'aria-sort': order,
    'aria-label': (col.title + ": activate to sort column " + nextOrder)
  };
}

var EditInput = React.createClass({displayName: "EditInput",
  getInitialState:function() {
    return {
      value: this.props.value
    }
  },

  componentDidMount:function() {
    this.getDOMNode().focus();
  },

  componentWillReceiveProps:function(nextProps) {
    this.setState({
      value: nextProps.value
    });
  },

  handleChange:function(ev) {
    this.setState({
      value: ev.target.value
    });
  },

  handleFocus:function(ev) {
    ev.target.focus();
    var length = ev.target.value.length;
    ev.target.setSelectionRange(length, length);
  },

  handleSave:function(ev) {
    this.props.onChange(this.props.col, this.props.row, this.state.value, this.props.target);
  },

  handleBlur:function(ev) {
    if(this.props.col.hasOwnProperty('validation')){
      if(this.props.col.validation.test(ev.target.value)) {
        this.handleSave();
      } else {
        this.props.onCancel(this.props.col, this.props.row, this.props.target);
      }
    } else {
      this.handleSave();
    }
  },

  handleKeyUp:function(ev) {
    if (ev.keyCode === 13) {
      this.handleSave(ev);
    }
    if (ev.keyCode === 27) {
      this.props.onCancel(this.props.col, this.props.row, this.props.target);
    }
  },

  render:function() {
    return (
      React.createElement("input", {type: "text", 
             style: {width: '100%'}, 
             className: "edit-input", 
             value: this.state.value, 
             onChange: this.handleChange, 
             onBlur: this.handleBlur, 
             onFocus: this.handleFocus, 
             onKeyUp: this.handleKeyUp})
    );
  }
});

var Table = React.createClass({displayName: "Table",

  propTypes: {
    keys: React.PropTypes.oneOfType([
      React.PropTypes.arrayOf(React.PropTypes.string),
      React.PropTypes.string
    ]).isRequired,
    columns: React.PropTypes.arrayOf(React.PropTypes.shape({
      title: React.PropTypes.string.isRequired,
      prop: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.number
      ]),
      render: React.PropTypes.func,
      sortable: React.PropTypes.bool,
      defaultContent: React.PropTypes.string,
      width: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.number
      ]),
      className: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.func
      ])
    })).isRequired,
    dataArray: React.PropTypes.arrayOf(React.PropTypes.oneOfType([
      React.PropTypes.array,
      React.PropTypes.object
    ])).isRequired,
    buildRowOpts: React.PropTypes.func,
    sortBy: React.PropTypes.shape({
      prop: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.number
      ]),
      order: React.PropTypes.oneOf(['ascending', 'descending'])
    }),
    onSort: React.PropTypes.func,
    onChange: React.PropTypes.func
  },

  getDefaultProps:function() {
    return {
      buildRowOpts: function()  {return {};},
      sortBy: {}
    };
  },

  componentDidMount:function() {
    // If no width was specified, then set the width that the browser applied
    // initially to avoid recalculating width between pages.
    for (var i = 0; i < this.props.columns.length; i++) {
      var thDom = this.refs[("th-" + i)].getDOMNode();
      if (!thDom.style.width) {
        thDom.style.width = (thDom.offsetWidth + "px");
      }
    }
  },

  setError:function(target) {
    target.classList.add('error');
  },

  handleCellClick:function(col, row, ev) {
    ev.target.classList.remove('empty-cell');
    React.render(React.createElement(EditInput, {value: row[col.prop], 
                            col: col, 
                            row: row, 
                            target: ev.target, 
                            onChange: this.handleChange, 
                            onCancel: this.handleCancel}), ev.target);
  },

  handleChange:function(col, row, val, target) {
    if(col.hasOwnProperty('validation')){
      if(col.validation.test(val)) {
        target.classList.remove('error');
        this.props.onChange(col, row, val);
        React.render(React.createElement("span", {className: getCellClass(col, row)}, getCellValue(col, row)), target);
      } else {
        this.setError(target);
      }
    } else {
      this.props.onChange(col, row, val);
      React.render(React.createElement("span", {className: getCellClass(col, row)}, getCellValue(col, row)), target);
    }
  },

  handleCancel:function(col, row, target) {
    target.classList.remove('error');
    React.render(React.createElement("span", {className: getCellClass(col, row)}, getCellValue(col, row)), target);
  },

  handleDelete:function() {
    this.props.onDelete();
  },

  handleAdd:function() {
    this.props.onAdd();
  },

  handleCheck:function(row, ev) {
    this.props.onChange({prop: 'checked'}, row, ev.target.checked);
  },

  handleCheckAll:function(ev) {
    this.props.onToggleCheckAll(ev.target.checked);
  },

  isCheckedAll:function() {
    return _.every(this.props.dataArray, { checked: true });
  },

  render:function() {
    var $__0=        this.props,columns=$__0.columns,keys=$__0.keys,buildRowOpts=$__0.buildRowOpts,sortBy=$__0.sortBy,onSort=$__0.onSort;

    var headers = columns.map(function(col, idx)  {
      var sortProps, order;
      // Only add sorting events if the column has a property and is sortable.
      if (col.sortable !== false && 'prop' in col) {
        sortProps = buildSortProps(col, sortBy, onSort);
        order = sortProps['aria-sort'];
      }

      return (
        React.createElement("th", React.__spread({
          ref: ("th-" + idx), 
          key: idx, 
          style: {width: col.width}, 
          role: "columnheader", 
          scope: "col"}, 
          sortProps), 
          React.createElement("span", null, col.title), 
          typeof order !== 'undefined' ?
            React.createElement("span", {className: ("sort-icon sort-" + order), "aria-hidden": "true"}) :
            null
        )
      );
    });

    var getKeys = Array.isArray(keys) ? keyGetter(keys) : simpleGet(keys);
    var rows = this.props.dataArray.map(function(row, r) 
      {return React.createElement("tr", React.__spread({key: getKeys(row)},  buildRowOpts(row), {className: "data-tr"}), 
        React.createElement("td", {key: r, className: "checkbox-td"}, 
          React.createElement("div", {className: "checkbox-container"}, 
            React.createElement("input", {id: 'check' + r, className: "checkbox", type: "checkbox", checked: row.checked, onChange: this.handleCheck.bind(this, row)}), 
            React.createElement("label", {htmlFor: 'check' + r})
          )
        ), 
        columns.map(
          function(col, i) {
            var edit = col.hasOwnProperty('editable') ? col.editable : true;
            return edit ?
              (React.createElement("td", {key: i, 
                   ref: i + getCellValue(col, row), 
                   className: getCellClass(col, row), 
                   onClick: this.handleCellClick.bind(this, col, row)}, 
                getCellValue(col, row)
              )) :
              (React.createElement("td", {key: i, 
                   ref: i + getCellValue(col, row), 
                   className: getCellClass(col, row)}, 
                getCellValue(col, row)
              ));
          }.bind(this)
        )
      );}.bind(this));

    var style = {
      position: 'absolute',
      width: 'calc(100% + 40px)',
      height: '100%',
      left: '-40px'
    };
    return (
      React.createElement("div", null, 
        React.createElement("div", {className: "table-controls"}, 
          React.createElement("button", {className: "btn btn-primary btn-sm opt-btn", onClick: this.handleAdd}, "+"), 
          React.createElement("button", {className: "btn btn-danger btn-sm opt-btn", onClick: this.handleDelete}, "-")
        ), 
        React.createElement("table", {className: this.props.className}, 
          React.createElement("caption", {className: "sr-only", role: "alert", "aria-live": "polite"}, 
            ("Sorted by " + sortBy.prop + ": " + sortBy.order + " order")
          ), 
          React.createElement("thead", null, 
          React.createElement("tr", null, 
            React.createElement("th", {className: "checkbox-th"}, 
              React.createElement("div", {className: "checkbox-container"}, 
                React.createElement("input", {id: "check-all", className: "checkbox", type: "checkbox", checked: this.isCheckedAll(), onChange: this.handleCheckAll}), 
                React.createElement("label", {htmlFor: "check-all"})
              )
            ), 
            headers
          )
          ), 
          React.createElement("tbody", null, 
          rows.length > 0 ? rows :
            React.createElement("tr", null, 
              React.createElement("td", {colSpan: columns.length + 1, className: "text-center"}, "No data")
            )
          )
        )
      )
    );
  }
});

module.exports = Table;
